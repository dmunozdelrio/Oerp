commit 24fbeae96dfc8f82e368344b50998a3b86b8d132
Author: DMUNOZDELRIO <dmunozdelrio@gmail.com>
Date:   Wed Jun 11 05:34:27 2025 -0600

    Added constraints to tables lacking integrity

diff --git a/ddl/ddl_constraints.sql b/ddl/ddl_constraints.sql
index d4e4c0a..312a33b 100644
--- a/ddl/ddl_constraints.sql
+++ b/ddl/ddl_constraints.sql
@@ -21,6 +21,14 @@ CREATE INDEX idx_gl_lines_account ON gl_lines(account_code);
 
 ALTER TABLE gl_header ADD CONSTRAINT fk_glh_state FOREIGN KEY (glh_state)
     REFERENCES gl_workflow_states(state_id);
+ALTER TABLE gl_header ADD CONSTRAINT fk_glh_tax_code FOREIGN KEY (tax_code)
+    REFERENCES tax_codes(tax_code);
+ALTER TABLE gl_header ADD CONSTRAINT fk_glh_period
+  FOREIGN KEY (period_id)
+  REFERENCES gl_periods(period_id);
+ALTER TABLE gl_lines ADD CONSTRAINT fk_gll_post_key
+  FOREIGN KEY (post_key)
+  REFERENCES gl_post_keys(key_id);
 CREATE INDEX idx_gl_header_period ON gl_header(period_id);
 CREATE INDEX idx_gl_header_state ON gl_header(glh_state);
 
diff --git a/ddl/ddl_tables.sql b/ddl/ddl_tables.sql
index 82e15ee..6487041 100644
--- a/ddl/ddl_tables.sql
+++ b/ddl/ddl_tables.sql
@@ -12,18 +12,20 @@ CREATE TABLE gl_header (
     approver         VARCHAR2(50),
     approval_date    DATE,
     period_id        NUMBER         NOT NULL,
-    status           CHAR(1)        DEFAULT 'B'
+    status           CHAR(1)        DEFAULT 'B',
+    tax_code         VARCHAR2(10)
 );
 
+
 CREATE TABLE gl_accounts (
-    account_code  VARCHAR2(30) PRIMARY KEY,
-    description   VARCHAR2(100),
-    account_type  VARCHAR2(20),
-    account_group VARCHAR2(30),
-    currency      VARCHAR2(3),
-    tax_code      VARCHAR2(10),
+    account_code    VARCHAR2(30) PRIMARY KEY,
+    description     VARCHAR2(100),
+    account_type    VARCHAR2(20),
+    account_group   VARCHAR2(30),
+    currency        VARCHAR2(3),
+    tax_code        VARCHAR2(10),
     withholding_rule NUMBER,
-    status        CHAR(1) CHECK (status IN ('A', 'I')) DEFAULT 'A'
+    status          CHAR(1) DEFAULT 'A' CHECK (status IN ('A','I'))
 );
 
 CREATE TABLE gl_lines (
@@ -112,16 +114,22 @@ CREATE TABLE users (
 
 -- Tabla GL_HEADER
 COMMENT ON TABLE gl_header IS 'Encabezados de asientos contables';
-COMMENT ON COLUMN gl_header.header_id IS 'PK: Identificador ├║nico del encabezado';
-COMMENT ON COLUMN gl_header.entry_date IS 'Fecha de contabilizaci├│n del asiento';
+COMMENT ON COLUMN gl_header.glh_id IS 'PK: Identificador ├║nico del encabezado';
+COMMENT ON COLUMN gl_header.doc_type IS 'Tipo de documento';
+COMMENT ON COLUMN gl_header.doc_no IS 'N├║mero de documento';
+COMMENT ON COLUMN gl_header.glh_exchange_rate IS 'Tipo de cambio';
+COMMENT ON COLUMN gl_header.glh_state IS 'Estado del encabezado';
+COMMENT ON COLUMN gl_header.approver IS 'Usuario que aprueba';
+COMMENT ON COLUMN gl_header.approval_date IS 'Fecha de aprobaci├│n';
 COMMENT ON COLUMN gl_header.period_id IS 'FK a gl_periods para el periodo contable';
+COMMENT ON COLUMN gl_header.status IS 'Estado: B= Borrador, A= Aprobado';
+COMMENT ON COLUMN gl_header.tax_code IS 'C├│digo de impuesto asociado al encabezado';
 
 -- Tabla GL_LINES
 COMMENT ON TABLE gl_lines IS 'L├¡neas de detalle de cada asiento';
 COMMENT ON COLUMN gl_lines.line_id IS 'PK: Identificador ├║nico de la l├¡nea';
 COMMENT ON COLUMN gl_lines.header_id IS 'FK a gl_header para relacionar l├¡neas';
 COMMENT ON COLUMN gl_lines.account_id IS 'FK a la cuenta contable afectada';
-COMMENT ON COLUMN gl_lines.amount IS 'Importe debitado o acreditado';
 
 -- Tabla GL_PERIODS
 COMMENT ON TABLE gl_periods IS 'Periodos contables con estado abierto o cerrado';

commit 5671e71ad04d43c403c8d7bbe51bf8a527979ad3
Author: DMUNOZDELRIO <dmunozdelrio@gmail.com>
Date:   Wed Jun 11 05:03:16 2025 -0600

    Added drop script inside deploy all

diff --git a/deploy_all.sql b/deploy_all.sql
index 51c8a92..38e1ce5 100644
--- a/deploy_all.sql
+++ b/deploy_all.sql
@@ -2,8 +2,10 @@
 -- Author  : Codex
 -- Date    : 2024-06-01
 -- Version : 1.0
-
+-- 0 delete all objects before deployment
+@ddl/dd_drop.sql
 -- 1. Tables
+
 @ddl/ddl_tables.sql
 
 -- 2. Sequences

commit 730a226c9bffa4cf60b39bd757ea18ae9cb85426
Author: DMUNOZDELRIO <dmunozdelrio@gmail.com>
Date:   Wed Jun 11 05:00:48 2025 -0600

    Added drop script

diff --git a/ddl/dd_drop.sql b/ddl/dd_drop.sql
new file mode 100644
index 0000000..f195876
--- /dev/null
+++ b/ddl/dd_drop.sql
@@ -0,0 +1,51 @@
+-- 1) Eliminar el Scheduler Job
+
+BEGIN
+  DBMS_SCHEDULER.DROP_JOB('REVERSE_RUN', TRUE);
+  DBMS_SCHEDULER.DROP_JOB('TDAGRICORP.REVERSE_RUN', TRUE);
+END;
+/
+
+-- 2) Eliminar Triggers
+DROP TRIGGER TDAGRICORP.TR_GL_HEADER_LOG;
+DROP TRIGGER TDAGRICORP.TR_GL_LINES_LOG;
+
+
+-- 3) Eliminar Packages (spec y body)
+DROP PACKAGE TDAGRICORP.GL_REPORT_PKG;
+DROP PACKAGE TDAGRICORP.GL_TAX_PKG;
+DROP PACKAGE TDAGRICORP.GL_UI_PKG;
+DROP PACKAGE TDAGRICORP.GL_PKG;
+
+-- 4) Eliminar Views
+DROP VIEW TDAGRICORP.GL_HEADER_V;
+DROP VIEW TDAGRICORP.GL_LINES_V;
+
+-- 5) Eliminar Indexes
+DROP INDEX TDAGRICORP.IDX_GL_LINES_HEADER;
+DROP INDEX TDAGRICORP.IDX_GL_LINES_POST_KEY;
+DROP INDEX TDAGRICORP.IDX_GL_LINES_ACCOUNT;
+DROP INDEX TDAGRICORP.IDX_GL_HEADER_PERIOD;
+DROP INDEX TDAGRICORP.IDX_GL_HEADER_STATE;
+
+-- 6) Eliminar Secuencias
+DROP SEQUENCE TDAGRICORP.SQ_GL_HEADER;
+DROP SEQUENCE TDAGRICORP.SQ_GL_LINES;
+DROP SEQUENCE TDAGRICORP.SQ_DOC_JE;
+DROP SEQUENCE TDAGRICORP.SQ_GL_CHANGE_LOG;
+
+-- 7) Eliminar Tablas (en orden para resolver dependencias)
+DROP TABLE TDAGRICORP.GL_LINES            CASCADE CONSTRAINTS;
+DROP TABLE TDAGRICORP.GL_CHANGE_LOG       CASCADE CONSTRAINTS;
+DROP TABLE TDAGRICORP.GL_HEADER           CASCADE CONSTRAINTS;
+DROP TABLE TDAGRICORP.GL_ACCOUNTS         CASCADE CONSTRAINTS;
+DROP TABLE TDAGRICORP.GL_DOC_TYPES        CASCADE CONSTRAINTS;
+DROP TABLE TDAGRICORP.GL_POST_KEYS        CASCADE CONSTRAINTS;
+DROP TABLE TDAGRICORP.GL_SPLIT_RULES      CASCADE CONSTRAINTS;
+DROP TABLE TDAGRICORP.GL_WORKFLOW_STATES  CASCADE CONSTRAINTS;
+DROP TABLE TDAGRICORP.TAX_CODES           CASCADE CONSTRAINTS;
+DROP TABLE TDAGRICORP.WITHHOLDING_RULES   CASCADE CONSTRAINTS;
+DROP TABLE TDAGRICORP.GL_PERIODS          CASCADE CONSTRAINTS;
+DROP TABLE TDAGRICORP.CURRENCIES          CASCADE CONSTRAINTS;
+DROP TABLE TDAGRICORP.GL_SEGMENTS         CASCADE CONSTRAINTS;
+DROP TABLE TDAGRICORP.USERS               CASCADE CONSTRAINTS;

commit 6390b48d5b926d6bccc26f95bace2c863e11a168
Author: DMUNOZDELRIO <dmunozdelrio@gmail.com>
Date:   Tue Jun 10 18:41:03 2025 -0600

    Added comments on tables and columns

diff --git a/ddl/ddl_constraints.sql b/ddl/ddl_constraints.sql
index b1a2c74..d4e4c0a 100644
--- a/ddl/ddl_constraints.sql
+++ b/ddl/ddl_constraints.sql
@@ -23,3 +23,26 @@ ALTER TABLE gl_header ADD CONSTRAINT fk_glh_state FOREIGN KEY (glh_state)
     REFERENCES gl_workflow_states(state_id);
 CREATE INDEX idx_gl_header_period ON gl_header(period_id);
 CREATE INDEX idx_gl_header_state ON gl_header(glh_state);
+
+ALTER TABLE gl_accounts ADD CONSTRAINT chk_account_status CHECK (status IN ('A', 'I'));
+ALTER TABLE gl_accounts ADD CONSTRAINT fk_account_currency FOREIGN KEY (currency)
+    REFERENCES currencies(currency_code);
+
+ALTER TABLE gl_accounts ADD CONSTRAINT fk_account_tax_code FOREIGN KEY (tax_code)
+    REFERENCES tax_codes(tax_code);
+
+ALTER TABLE gl_accounts ADD CONSTRAINT fk_account_withholding_rule FOREIGN KEY (withholding_rule)
+    REFERENCES withholding_rules(rule_id);
+
+ALTER TABLE gl_post_keys ADD CONSTRAINT chk_dr_cr_flag CHECK (dr_cr_flag IN ('D', 'C'));
+ALTER TABLE gl_post_keys ADD CONSTRAINT fk_post_key_account FOREIGN KEY (account_code)
+    REFERENCES gl_accounts(account_code);
+ALTER TABLE gl_split_rules ADD CONSTRAINT fk_split_rule_account FOREIGN KEY (account_code)
+    REFERENCES gl_accounts(account_code);
+ALTER TABLE gl_split_rules ADD CONSTRAINT fk_split_rule_segment FOREIGN KEY (segment_field)
+    REFERENCES gl_segments(segment_id);
+
+ALTER TABLE gl_workflow_states ADD CONSTRAINT chk_state_status CHECK (status IN ('A', 'I'));
+ALTER TABLE gl_workflow_states ADD CONSTRAINT fk_state_approver FOREIGN KEY (approver)
+    REFERENCES users(user_id);
+
diff --git a/ddl/ddl_tables.sql b/ddl/ddl_tables.sql
index 1760478..82e15ee 100644
--- a/ddl/ddl_tables.sql
+++ b/ddl/ddl_tables.sql
@@ -49,7 +49,8 @@ CREATE TABLE gl_post_keys (
     key_id           VARCHAR2(10) PRIMARY KEY,
     description      VARCHAR2(100),
     dr_cr_flag       CHAR(1) CHECK (dr_cr_flag IN ('D','C')),
-    mandatory_fields VARCHAR2(200)
+    mandatory_fields VARCHAR2(200),
+    account_code     VARCHAR2(30)
 );
 
 CREATE TABLE gl_split_rules (
@@ -60,7 +61,9 @@ CREATE TABLE gl_split_rules (
 
 CREATE TABLE gl_workflow_states (
     state_id    VARCHAR2(10) PRIMARY KEY,
-    description VARCHAR2(100)
+    description VARCHAR2(100),
+    status      CHAR(1)    DEFAULT 'A' CHECK(status IN('A','I')),
+    approver    VARCHAR2(50)
 );
 
 CREATE TABLE tax_codes (
@@ -91,6 +94,22 @@ CREATE TABLE gl_periods (
     status CHAR(1) -- 'O' for open, 'C' for closed
 );
 
+CREATE TABLE currencies (
+  currency_code VARCHAR2(3) PRIMARY KEY,
+  description   VARCHAR2(50)
+);
+
+CREATE TABLE gl_segments (
+  segment_id   VARCHAR2(30) PRIMARY KEY,
+  description  VARCHAR2(100)
+);
+
+CREATE TABLE users (
+  user_id    VARCHAR2(50) PRIMARY KEY,
+  username   VARCHAR2(50),
+  full_name  VARCHAR2(100)
+);
+
 -- Tabla GL_HEADER
 COMMENT ON TABLE gl_header IS 'Encabezados de asientos contables';
 COMMENT ON COLUMN gl_header.header_id IS 'PK: Identificador ├║nico del encabezado';
@@ -135,6 +154,7 @@ COMMENT ON COLUMN gl_post_keys.key_id IS 'PK: Identificador de la clave de conta
 COMMENT ON COLUMN gl_post_keys.description IS 'Descripci├│n de la clave de contabilizaci├│n';
 COMMENT ON COLUMN gl_post_keys.dr_cr_flag IS 'Indica si es D├⌐bito (D) o Cr├⌐dito (C)';
 COMMENT ON COLUMN gl_post_keys.mandatory_fields IS 'Campos obligatorios para esta clave';
+COMMENT ON COLUMN gl_post_keys.account_code IS 'C├│digo de la cuenta asociada a la clave';
 
 -- Tabla GL_SPLIT_RULES
 COMMENT ON TABLE gl_split_rules IS 'Reglas para dividir cuentas en segmentos';
@@ -146,6 +166,8 @@ COMMENT ON COLUMN gl_split_rules.segment_field IS 'Campo de segmento para la div
 COMMENT ON TABLE gl_workflow_states IS 'Estados del flujo de trabajo para aprobaciones';
 COMMENT ON COLUMN gl_workflow_states.state_id IS 'PK: Identificador del estado';
 COMMENT ON COLUMN gl_workflow_states.description IS 'Descripci├│n del estado del flujo de trabajo';
+COMMENT ON COLUMN gl_workflow_states.status IS 'Estado del flujo de trabajo: A=Activo, I=Inactivo';
+COMMENT ON COLUMN gl_workflow_states.approver IS 'Usuario encargado de aprobar el flujo';
 
 -- Tabla TAX_CODES
 COMMENT ON TABLE tax_codes IS 'C├│digos de impuestos aplicables a las cuentas';

commit 4fd3bd2992ddbf28fbc2786c5e7fbc6add709d6d
Author: DMUNOZDELRIO <dmunozdelrio@gmail.com>
Date:   Tue Jun 10 18:34:21 2025 -0600

    Added comments on tables and columns

diff --git a/ddl/ddl_tables.sql b/ddl/ddl_tables.sql
index 5f65ca2..1760478 100644
--- a/ddl/ddl_tables.sql
+++ b/ddl/ddl_tables.sql
@@ -18,12 +18,18 @@ CREATE TABLE gl_header (
 CREATE TABLE gl_accounts (
     account_code  VARCHAR2(30) PRIMARY KEY,
     description   VARCHAR2(100),
-    account_type  VARCHAR2(20)
+    account_type  VARCHAR2(20),
+    account_group VARCHAR2(30),
+    currency      VARCHAR2(3),
+    tax_code      VARCHAR2(10),
+    withholding_rule NUMBER,
+    status        CHAR(1) CHECK (status IN ('A', 'I')) DEFAULT 'A'
 );
 
 CREATE TABLE gl_lines (
     gll_id        NUMBER        PRIMARY KEY,
     glh_id        NUMBER        NOT NULL,
+    account_id    VARCHAR2(30)  NOT NULL,
     account_code  VARCHAR2(30)  NOT NULL,
     post_key      VARCHAR2(10)  NOT NULL,
     cost_center   VARCHAR2(30),
@@ -84,3 +90,87 @@ CREATE TABLE gl_periods (
     end_date DATE,
     status CHAR(1) -- 'O' for open, 'C' for closed
 );
+
+-- Tabla GL_HEADER
+COMMENT ON TABLE gl_header IS 'Encabezados de asientos contables';
+COMMENT ON COLUMN gl_header.header_id IS 'PK: Identificador ├║nico del encabezado';
+COMMENT ON COLUMN gl_header.entry_date IS 'Fecha de contabilizaci├│n del asiento';
+COMMENT ON COLUMN gl_header.period_id IS 'FK a gl_periods para el periodo contable';
+
+-- Tabla GL_LINES
+COMMENT ON TABLE gl_lines IS 'L├¡neas de detalle de cada asiento';
+COMMENT ON COLUMN gl_lines.line_id IS 'PK: Identificador ├║nico de la l├¡nea';
+COMMENT ON COLUMN gl_lines.header_id IS 'FK a gl_header para relacionar l├¡neas';
+COMMENT ON COLUMN gl_lines.account_id IS 'FK a la cuenta contable afectada';
+COMMENT ON COLUMN gl_lines.amount IS 'Importe debitado o acreditado';
+
+-- Tabla GL_PERIODS
+COMMENT ON TABLE gl_periods IS 'Periodos contables con estado abierto o cerrado';
+COMMENT ON COLUMN gl_periods.period_id IS 'PK: A├▒o y mes del periodo (YYYYMM)';
+COMMENT ON COLUMN gl_periods.start_date IS 'Fecha de inicio del periodo';
+COMMENT ON COLUMN gl_periods.end_date IS 'Fecha de fin del periodo';
+COMMENT ON COLUMN gl_periods.status IS 'Estado: O=Open, C=Closed';
+
+-- Tabla GL_ACCOUNTS
+COMMENT ON TABLE gl_accounts IS 'Cuentas contables definidas en el sistema';
+COMMENT ON COLUMN gl_accounts.account_code IS 'PK: C├│digo ├║nico de la cuenta';
+COMMENT ON COLUMN gl_accounts.description IS 'Descripci├│n de la cuenta contable';
+COMMENT ON COLUMN gl_accounts.account_type IS 'Tipo de cuenta (Activo, Pasivo, etc.)';
+COMMENT ON COLUMN gl_accounts.account_group IS 'Grupo contable al que pertenece la cuenta';
+COMMENT ON COLUMN gl_accounts.currency IS 'Moneda de la cuenta, si aplica';
+COMMENT ON COLUMN gl_accounts.tax_code IS 'C├│digo de impuesto asociado a la cuenta';
+COMMENT ON COLUMN gl_accounts.withholding_rule IS 'Regla de retenci├│n asociada a la cuenta';
+COMMENT ON COLUMN gl_accounts.status IS 'Estado de la cuenta: A=Activo, I=Inactivo';
+
+-- Tabla GL_DOC_TYPES
+COMMENT ON TABLE gl_doc_types IS 'Tipos de documentos contables';
+COMMENT ON COLUMN gl_doc_types.doc_type IS 'PK: Tipo de documento';
+COMMENT ON COLUMN gl_doc_types.description IS 'Descripci├│n del tipo de documento';
+COMMENT ON COLUMN gl_doc_types.num_range_start IS 'Inicio del rango de n├║meros';
+COMMENT ON COLUMN gl_doc_types.num_range_end IS 'Fin del rango de n├║meros';
+
+-- Tabla GL_POST_KEYS
+COMMENT ON TABLE gl_post_keys IS 'Claves de contabilizaci├│n para las l├¡neas';
+COMMENT ON COLUMN gl_post_keys.key_id IS 'PK: Identificador de la clave de contabilizaci├│n';
+COMMENT ON COLUMN gl_post_keys.description IS 'Descripci├│n de la clave de contabilizaci├│n';
+COMMENT ON COLUMN gl_post_keys.dr_cr_flag IS 'Indica si es D├⌐bito (D) o Cr├⌐dito (C)';
+COMMENT ON COLUMN gl_post_keys.mandatory_fields IS 'Campos obligatorios para esta clave';
+
+-- Tabla GL_SPLIT_RULES
+COMMENT ON TABLE gl_split_rules IS 'Reglas para dividir cuentas en segmentos';
+COMMENT ON COLUMN gl_split_rules.rule_id IS 'PK: Identificador de la regla de divisi├│n';
+COMMENT ON COLUMN gl_split_rules.account_code IS 'C├│digo de la cuenta a dividir';
+COMMENT ON COLUMN gl_split_rules.segment_field IS 'Campo de segmento para la divisi├│n';
+
+-- Tabla GL_WORKFLOW_STATES
+COMMENT ON TABLE gl_workflow_states IS 'Estados del flujo de trabajo para aprobaciones';
+COMMENT ON COLUMN gl_workflow_states.state_id IS 'PK: Identificador del estado';
+COMMENT ON COLUMN gl_workflow_states.description IS 'Descripci├│n del estado del flujo de trabajo';
+
+-- Tabla TAX_CODES
+COMMENT ON TABLE tax_codes IS 'C├│digos de impuestos aplicables a las cuentas';
+COMMENT ON COLUMN tax_codes.tax_code IS 'PK: C├│digo de impuesto';
+COMMENT ON COLUMN tax_codes.description IS 'Descripci├│n del impuesto';
+COMMENT ON COLUMN tax_codes.rate IS 'Tasa del impuesto (porcentaje)';
+
+-- Tabla WITHHOLDING_RULES
+COMMENT ON TABLE withholding_rules IS 'Reglas de retenci├│n aplicables a las cuentas';
+COMMENT ON COLUMN withholding_rules.rule_id IS 'PK: Identificador de la regla de retenci├│n';
+COMMENT ON COLUMN withholding_rules.description IS 'Descripci├│n de la regla de retenci├│n';
+COMMENT ON COLUMN withholding_rules.rate IS 'Tasa de retenci├│n (porcentaje)';
+
+-- Tabla GL_CHANGE_LOG
+COMMENT ON TABLE gl_change_log IS 'Registro de cambios en las tablas del m├│dulo GL';
+COMMENT ON COLUMN gl_change_log.log_id IS 'PK: Identificador ├║nico del registro de cambio';
+COMMENT ON COLUMN gl_change_log.table_name IS 'Nombre de la tabla afectada';
+COMMENT ON COLUMN gl_change_log.operation IS 'Operaci├│n realizada (INSERT, UPDATE, DELETE)';
+COMMENT ON COLUMN gl_change_log.row_id_val IS 'Valor del ID de la fila afectada';
+COMMENT ON COLUMN gl_change_log.changed_by IS 'Usuario que realiz├│ el cambio';
+COMMENT ON COLUMN gl_change_log.changed_date IS 'Fecha y hora del cambio';
+
+-- Tabla GL_PERIODS
+COMMENT ON TABLE gl_periods IS 'Periodos contables con estado abierto o cerrado';
+COMMENT ON COLUMN gl_periods.period_id IS 'PK: Identificador ├║nico del periodo contable';
+COMMENT ON COLUMN gl_periods.start_date IS 'Fecha de inicio del periodo contable';
+COMMENT ON COLUMN gl_periods.end_date IS 'Fecha de fin del periodo contable';
+COMMENT ON COLUMN gl_periods.status IS 'Estado del periodo: O=Abierto, C=Cerrado';

commit db042238fc038d3691ff13da437307ca1a3fa187
Author: DMUNOZDELRIO <dmunozdelrio@gmail.com>
Date:   Tue Jun 10 18:24:06 2025 -0600

    Added account table and others

diff --git a/ddl/ddl_tables.sql b/ddl/ddl_tables.sql
index b0f346a..5f65ca2 100644
--- a/ddl/ddl_tables.sql
+++ b/ddl/ddl_tables.sql
@@ -77,3 +77,10 @@ CREATE TABLE gl_change_log (
     changed_by   VARCHAR2(50),
     changed_date DATE
 );
+
+CREATE TABLE gl_periods (
+    period_id NUMBER PRIMARY KEY,
+    start_date DATE,
+    end_date DATE,
+    status CHAR(1) -- 'O' for open, 'C' for closed
+);
diff --git a/ddl/seed_data.sql b/ddl/seed_data.sql
index 6f3936f..39877c5 100644
--- a/ddl/seed_data.sql
+++ b/ddl/seed_data.sql
@@ -41,3 +41,6 @@ INSERT INTO gl_accounts(account_code, description, account_type) VALUES('5100',
 INSERT INTO gl_accounts(account_code, description, account_type) VALUES('5200', 'Software Development Expense', 'EXPENSE');
 INSERT INTO gl_accounts(account_code, description, account_type) VALUES('5300', 'Marketing Expense', 'EXPENSE');
 INSERT INTO gl_accounts(account_code, description, account_type) VALUES('5400', 'General & Administrative Expense', 'EXPENSE');
+
+INSERT INTO gl_periods(period_id, start_date, end_date, status)
+VALUES(202401, DATE '2024-01-01', DATE '2024-01-31', 'O');
diff --git a/history.log b/history.log
new file mode 100644
index 0000000..e69de29
diff --git a/jobs/reverse_job.sql b/jobs/reverse_job.sql
index 1529974..3288a99 100644
--- a/jobs/reverse_job.sql
+++ b/jobs/reverse_job.sql
@@ -23,7 +23,7 @@ BEGIN
         END;
       ]',
       start_date      => &START_DATE,
-      repeat_interval => &REPEAT_INTERVAL,
+      repeat_interval => '&REPEAT_INTERVAL',
       enabled         => TRUE
   );
 END;

commit ae78d359f45da356f5b91f49adbc1c566bd38101
Merge: 2fe3e56 0bf73a6
Author: Diego Munoz del rio <85699761+dmunozdelrio@users.noreply.github.com>
Date:   Tue Jun 10 18:42:27 2025 -0600

    Merge pull request #7 from dmunozdelrio/d4j2xb-codex/generate-oracle-11g-pl/sql-journal-entry-module-codebase
    
    Add gl_accounts table and chart of accounts

commit 0bf73a63931f04ca3f6864f9c98b2da5270e20be
Merge: 781088a 2fe3e56
Author: Diego Munoz del rio <85699761+dmunozdelrio@users.noreply.github.com>
Date:   Tue Jun 10 18:41:58 2025 -0600

    Merge branch 'main' into d4j2xb-codex/generate-oracle-11g-pl/sql-journal-entry-module-codebase

commit 781088a46beeee552979702f2fcefc6ebc412606
Author: Diego Munoz del rio <85699761+dmunozdelrio@users.noreply.github.com>
Date:   Tue Jun 10 18:19:31 2025 -0600

    Add gl_accounts table and sample chart of accounts

diff --git a/ddl/ddl_constraints.sql b/ddl/ddl_constraints.sql
new file mode 100644
index 0000000..4b34c8f
--- /dev/null
+++ b/ddl/ddl_constraints.sql
@@ -0,0 +1,25 @@
+-- Purpose : Add constraints and indexes for Journal Entry
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+ALTER TABLE gl_header ADD CONSTRAINT fk_glh_doctype FOREIGN KEY (doc_type)
+    REFERENCES gl_doc_types(doc_type);
+
+ALTER TABLE gl_lines ADD CONSTRAINT fk_gll_header FOREIGN KEY (glh_id)
+    REFERENCES gl_header(glh_id);
+
+ALTER TABLE gl_lines ADD CONSTRAINT fk_gll_tax FOREIGN KEY (tax_code)
+    REFERENCES tax_codes(tax_code);
+
+ALTER TABLE gl_lines ADD CONSTRAINT fk_gll_account FOREIGN KEY (account_code)
+    REFERENCES gl_accounts(account_code);
+
+CREATE INDEX idx_gl_lines_header ON gl_lines(glh_id);
+CREATE INDEX idx_gl_lines_post_key ON gl_lines(post_key);
+CREATE INDEX idx_gl_lines_account ON gl_lines(account_code);
+
+ALTER TABLE gl_header ADD CONSTRAINT fk_glh_state FOREIGN KEY (glh_state)
+    REFERENCES gl_workflow_states(state_id);
+CREATE INDEX idx_gl_header_period ON gl_header(period_id);
+CREATE INDEX idx_gl_header_state ON gl_header(glh_state);
diff --git a/ddl/ddl_sequences.sql b/ddl/ddl_sequences.sql
new file mode 100644
index 0000000..93b828a
--- /dev/null
+++ b/ddl/ddl_sequences.sql
@@ -0,0 +1,10 @@
+-- Purpose : Create sequences for Journal Entry
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE SEQUENCE sq_gl_header START WITH 1 INCREMENT BY 1;
+CREATE SEQUENCE sq_gl_lines  START WITH 1 INCREMENT BY 1;
+-- Sequence per DOC_TYPE example for 'JE'
+CREATE SEQUENCE sq_doc_JE START WITH 1 INCREMENT BY 1;
+CREATE SEQUENCE sq_gl_change_log START WITH 1 INCREMENT BY 1;
diff --git a/ddl/ddl_tables.sql b/ddl/ddl_tables.sql
new file mode 100644
index 0000000..468df1f
--- /dev/null
+++ b/ddl/ddl_tables.sql
@@ -0,0 +1,79 @@
+-- Purpose : Create core tables for Journal Entry
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE TABLE gl_header (
+    glh_id           NUMBER         PRIMARY KEY,
+    doc_type         VARCHAR2(10)   NOT NULL,
+    doc_no           NUMBER,
+    glh_exchange_rate NUMBER(10,5),
+    glh_state        VARCHAR2(2),
+    approver         VARCHAR2(50),
+    approval_date    DATE,
+    period_id        NUMBER         NOT NULL,
+    status           CHAR(1)        DEFAULT 'B'
+);
+
+CREATE TABLE gl_accounts (
+    account_code  VARCHAR2(30) PRIMARY KEY,
+    description   VARCHAR2(100),
+    account_type  VARCHAR2(20)
+);
+
+CREATE TABLE gl_lines (
+    gll_id        NUMBER        PRIMARY KEY,
+    glh_id        NUMBER        NOT NULL,
+    account_code  VARCHAR2(30)  NOT NULL,
+    post_key      VARCHAR2(10)  NOT NULL,
+    cost_center   VARCHAR2(30),
+    tax_code      VARCHAR2(10),
+    debit_amount  NUMBER(15,2),
+    credit_amount NUMBER(15,2)
+);
+
+CREATE TABLE gl_doc_types (
+    doc_type        VARCHAR2(10) PRIMARY KEY,
+    description     VARCHAR2(100),
+    num_range_start NUMBER,
+    num_range_end   NUMBER
+);
+
+CREATE TABLE gl_post_keys (
+    key_id           VARCHAR2(10) PRIMARY KEY,
+    description      VARCHAR2(100),
+    dr_cr_flag       CHAR(1) CHECK (dr_cr_flag IN ('D','C')),
+    mandatory_fields VARCHAR2(200)
+);
+
+CREATE TABLE gl_split_rules (
+    rule_id      NUMBER PRIMARY KEY,
+    account_code VARCHAR2(30),
+    segment_field VARCHAR2(30)
+);
+
+CREATE TABLE gl_workflow_states (
+    state_id    VARCHAR2(10) PRIMARY KEY,
+    description VARCHAR2(100)
+);
+
+CREATE TABLE tax_codes (
+    tax_code    VARCHAR2(10) PRIMARY KEY,
+    description VARCHAR2(100),
+    rate        NUMBER(5,2)
+);
+
+CREATE TABLE withholding_rules (
+    rule_id     NUMBER PRIMARY KEY,
+    description VARCHAR2(100),
+    rate        NUMBER(5,2)
+);
+
+CREATE TABLE gl_change_log (
+    log_id       NUMBER PRIMARY KEY,
+    table_name   VARCHAR2(30),
+    operation    VARCHAR2(10),
+    row_id_val   NUMBER,
+    changed_by   VARCHAR2(50),
+    changed_date DATE
+);
diff --git a/ddl/ddl_views.sql b/ddl/ddl_views.sql
new file mode 100644
index 0000000..e12933a
--- /dev/null
+++ b/ddl/ddl_views.sql
@@ -0,0 +1,14 @@
+-- Purpose : Create views for Journal Entry
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE VIEW gl_header_v AS
+SELECT h.*, d.description AS doc_description
+  FROM gl_header h
+  LEFT JOIN gl_doc_types d ON h.doc_type = d.doc_type;
+
+CREATE OR REPLACE VIEW gl_lines_v AS
+SELECT l.*, h.doc_no, h.doc_type
+  FROM gl_lines l
+  JOIN gl_header h ON l.glh_id = h.glh_id;
diff --git a/ddl/seed_data.sql b/ddl/seed_data.sql
new file mode 100644
index 0000000..f805423
--- /dev/null
+++ b/ddl/seed_data.sql
@@ -0,0 +1,43 @@
+-- Purpose : Seed lookup tables
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+INSERT INTO gl_doc_types(doc_type, description, num_range_start, num_range_end)
+VALUES('JE', 'Journal Entry', 1, 999999);
+
+INSERT INTO gl_post_keys(key_id, description, dr_cr_flag, mandatory_fields)
+VALUES('40', 'Debit Post', 'D', 'COST_CENTER');
+INSERT INTO gl_post_keys(key_id, description, dr_cr_flag, mandatory_fields)
+VALUES('50', 'Credit Post', 'C', 'COST_CENTER');
+
+INSERT INTO gl_workflow_states(state_id, description)
+VALUES('N', 'New');
+INSERT INTO gl_workflow_states(state_id, description)
+VALUES('P', 'Posted');
+
+INSERT INTO tax_codes(tax_code, description, rate)
+VALUES('VAT', 'Value Added Tax', 5);
+
+INSERT INTO withholding_rules(rule_id, description, rate)
+VALUES(1, 'Default WH', 10);
+
+-- Chart of Accounts
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('1000', 'Cash', 'ASSET');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('1100', 'Accounts Receivable', 'ASSET');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('1200', 'Inventory - Retail', 'ASSET');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('1250', 'Raw Materials Inventory', 'ASSET');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('1400', 'Lab Equipment', 'ASSET');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('1500', 'Software Assets', 'ASSET');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('2000', 'Accounts Payable', 'LIABILITY');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('2100', 'Accrued Expenses', 'LIABILITY');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('3000', 'Equity Capital', 'EQUITY');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('4000', 'Product Sales Revenue', 'REVENUE');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('4100', 'Drug Sales Revenue', 'REVENUE');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('4200', 'Biotech Services Revenue', 'REVENUE');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('4300', 'Software License Revenue', 'REVENUE');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('5000', 'Cost of Goods Sold', 'EXPENSE');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('5100', 'Research & Development Expense', 'EXPENSE');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('5200', 'Software Development Expense', 'EXPENSE');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('5300', 'Marketing Expense', 'EXPENSE');
+INSERT INTO gl_accounts(account_code, description, account_type) VALUES('5400', 'General & Administrative Expense', 'EXPENSE');
diff --git a/deploy_all.sql b/deploy_all.sql
new file mode 100644
index 0000000..51c8a92
--- /dev/null
+++ b/deploy_all.sql
@@ -0,0 +1,36 @@
+-- Purpose : Master deployment script for Journal Entry module
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+-- 1. Tables
+@ddl/ddl_tables.sql
+
+-- 2. Sequences
+@ddl/ddl_sequences.sql
+
+-- 3. Constraints and Indexes
+@ddl/ddl_constraints.sql
+
+-- 4. Views
+@ddl/ddl_views.sql
+
+-- 5. Packages
+@pkg/gl_pkg.pks
+@pkg/gl_pkg.pkb
+@pkg/gl_ui_pkg.pks
+@pkg/gl_ui_pkg.pkb
+@pkg/gl_tax_pkg.pks
+@pkg/gl_tax_pkg.pkb
+@pkg/gl_report_pkg.pks
+@pkg/gl_report_pkg.pkb
+
+-- 6. Triggers
+@triggers/tr_gl_header_log.sql
+@triggers/tr_gl_lines_log.sql
+
+-- 7. Scheduler jobs
+@jobs/reverse_job.sql
+
+-- 8. Seed data
+@ddl/seed_data.sql
diff --git a/jobs/reverse_job.sql b/jobs/reverse_job.sql
new file mode 100644
index 0000000..96ef6d7
--- /dev/null
+++ b/jobs/reverse_job.sql
@@ -0,0 +1,15 @@
+-- Purpose : Scheduler job to reverse journal entries
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+BEGIN
+  DBMS_SCHEDULER.CREATE_JOB(
+      job_name        => 'REVERSE_RUN',
+      job_type        => 'PLSQL_BLOCK',
+      job_action      => 'BEGIN gl_pkg.reverse_entries(ADD_MONTHS(TRUNC(SYSDATE,''MM''),-1)); END;',
+      start_date      => SYSDATE,
+      repeat_interval => 'FREQ=DAILY',
+      enabled         => TRUE);
+END;
+/
diff --git a/pkg/gl_pkg.pkb b/pkg/gl_pkg.pkb
new file mode 100644
index 0000000..9e3448f
--- /dev/null
+++ b/pkg/gl_pkg.pkb
@@ -0,0 +1,115 @@
+-- Purpose : Core business package body for Journal Entry
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE BODY gl_pkg AS
+
+  PROCEDURE init_header(p_doc_type      IN gl_header.doc_type%TYPE,
+                        p_period_id     IN gl_header.period_id%TYPE,
+                        p_exchange_rate IN gl_header.glh_exchange_rate%TYPE,
+                        p_glh_id        OUT gl_header.glh_id%TYPE) IS
+    v_seq_name VARCHAR2(30);
+  BEGIN
+    SELECT 'SQ_DOC_' || p_doc_type INTO v_seq_name FROM gl_doc_types
+      WHERE doc_type = p_doc_type;
+
+    EXECUTE IMMEDIATE 'SELECT ' || v_seq_name || '.NEXTVAL FROM dual' INTO p_glh_id;
+
+    INSERT INTO gl_header(glh_id, doc_type, doc_no, glh_exchange_rate, period_id, glh_state)
+    VALUES(p_glh_id, p_doc_type, p_glh_id, p_exchange_rate, p_period_id, 'N');
+  EXCEPTION
+    WHEN NO_DATA_FOUND THEN
+      RAISE_APPLICATION_ERROR(-20001, 'Invalid DOC_TYPE');
+  END init_header;
+
+  PROCEDURE add_line(p_glh_id       IN gl_lines.glh_id%TYPE,
+                     p_account_code IN gl_lines.account_code%TYPE,
+                     p_post_key     IN gl_lines.post_key%TYPE,
+                     p_cost_center  IN gl_lines.cost_center%TYPE,
+                     p_tax_code     IN gl_lines.tax_code%TYPE,
+                     p_debit_amount IN gl_lines.debit_amount%TYPE,
+                     p_credit_amount IN gl_lines.credit_amount%TYPE) IS
+    v_mandatory VARCHAR2(200);
+    v_flag CHAR(1);
+  BEGIN
+    SELECT mandatory_fields, dr_cr_flag INTO v_mandatory, v_flag
+      FROM gl_post_keys WHERE key_id = p_post_key;
+
+    IF v_flag = 'D' AND (p_debit_amount IS NULL OR p_debit_amount <= 0) THEN
+      RAISE_APPLICATION_ERROR(-20002, 'Debit amount required');
+    ELSIF v_flag = 'C' AND (p_credit_amount IS NULL OR p_credit_amount <= 0) THEN
+      RAISE_APPLICATION_ERROR(-20003, 'Credit amount required');
+    END IF;
+
+    IF INSTR(v_mandatory, 'COST_CENTER') > 0 AND p_cost_center IS NULL THEN
+      RAISE_APPLICATION_ERROR(-20004, 'Cost center mandatory');
+    END IF;
+
+    INSERT INTO gl_lines(gll_id, glh_id, account_code, post_key,
+                         cost_center, tax_code, debit_amount, credit_amount)
+    VALUES(sq_gl_lines.NEXTVAL, p_glh_id, p_account_code, p_post_key,
+           p_cost_center, p_tax_code, p_debit_amount, p_credit_amount);
+  EXCEPTION
+    WHEN NO_DATA_FOUND THEN
+      RAISE_APPLICATION_ERROR(-20005, 'Invalid POST_KEY');
+  END add_line;
+
+  PROCEDURE validate_header(p_glh_id IN gl_header.glh_id%TYPE) IS
+    v_debits NUMBER;
+    v_credits NUMBER;
+    v_doc_type gl_header.doc_type%TYPE;
+  BEGIN
+    SELECT SUM(NVL(debit_amount,0)), SUM(NVL(credit_amount,0))
+      INTO v_debits, v_credits
+      FROM gl_lines WHERE glh_id = p_glh_id;
+
+    IF v_debits <> v_credits THEN
+      RAISE_APPLICATION_ERROR(-20006, 'Journal not balanced');
+    END IF;
+
+    SELECT doc_type INTO v_doc_type FROM gl_header WHERE glh_id = p_glh_id;
+    IF NOT EXISTS (SELECT 1 FROM gl_doc_types WHERE doc_type = v_doc_type) THEN
+      RAISE_APPLICATION_ERROR(-20007, 'Invalid DOC_TYPE');
+    END IF;
+  END validate_header;
+
+  PROCEDURE post_journal(p_glh_id IN gl_header.glh_id%TYPE,
+                         p_approver IN gl_header.approver%TYPE) IS
+  BEGIN
+    UPDATE gl_header
+       SET glh_state = 'P', approver = p_approver,
+           approval_date = SYSDATE
+     WHERE glh_id = p_glh_id;
+  END post_journal;
+
+  PROCEDURE apply_splits(p_glh_id IN gl_header.glh_id%TYPE) IS
+  BEGIN
+    FOR r IN (SELECT gll_id, account_code
+                FROM gl_lines WHERE glh_id = p_glh_id) LOOP
+      FOR s IN (SELECT segment_field FROM gl_split_rules
+                 WHERE account_code = r.account_code) LOOP
+        INSERT INTO gl_lines(gll_id, glh_id, account_code, post_key,
+                             cost_center, tax_code, debit_amount, credit_amount)
+        VALUES(sq_gl_lines.NEXTVAL, p_glh_id, r.account_code, 'SPLIT',
+               s.segment_field, NULL, 0, 0);
+      END LOOP;
+    END LOOP;
+  END apply_splits;
+
+  PROCEDURE reverse_entries(p_period_id IN NUMBER) IS
+  BEGIN
+    FOR h IN (SELECT glh_id FROM gl_header WHERE period_id = p_period_id) LOOP
+      FOR l IN (SELECT * FROM gl_lines WHERE glh_id = h.glh_id) LOOP
+        INSERT INTO gl_lines(gll_id, glh_id, account_code, post_key,
+                             cost_center, tax_code,
+                             debit_amount, credit_amount)
+        VALUES(sq_gl_lines.NEXTVAL, h.glh_id, l.account_code, l.post_key,
+               l.cost_center, l.tax_code,
+               -NVL(l.debit_amount,0), -NVL(l.credit_amount,0));
+      END LOOP;
+    END LOOP;
+  END reverse_entries;
+
+END gl_pkg;
+/
diff --git a/pkg/gl_pkg.pks b/pkg/gl_pkg.pks
new file mode 100644
index 0000000..1dc64ce
--- /dev/null
+++ b/pkg/gl_pkg.pks
@@ -0,0 +1,26 @@
+-- Purpose : Core business package spec for Journal Entry
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE gl_pkg AS
+  PROCEDURE init_header(p_doc_type      IN gl_header.doc_type%TYPE,
+                        p_period_id     IN gl_header.period_id%TYPE,
+                        p_exchange_rate IN gl_header.glh_exchange_rate%TYPE,
+                        p_glh_id        OUT gl_header.glh_id%TYPE);
+
+  PROCEDURE add_line(p_glh_id       IN gl_lines.glh_id%TYPE,
+                     p_account_code IN gl_lines.account_code%TYPE,
+                     p_post_key     IN gl_lines.post_key%TYPE,
+                     p_cost_center  IN gl_lines.cost_center%TYPE,
+                     p_tax_code     IN gl_lines.tax_code%TYPE,
+                     p_debit_amount IN gl_lines.debit_amount%TYPE,
+                     p_credit_amount IN gl_lines.credit_amount%TYPE);
+
+  PROCEDURE validate_header(p_glh_id IN gl_header.glh_id%TYPE);
+  PROCEDURE post_journal(p_glh_id IN gl_header.glh_id%TYPE,
+                         p_approver IN gl_header.approver%TYPE);
+  PROCEDURE apply_splits(p_glh_id IN gl_header.glh_id%TYPE);
+  PROCEDURE reverse_entries(p_period_id IN NUMBER);
+END gl_pkg;
+/
diff --git a/pkg/gl_report_pkg.pkb b/pkg/gl_report_pkg.pkb
new file mode 100644
index 0000000..79d1af0
--- /dev/null
+++ b/pkg/gl_report_pkg.pkb
@@ -0,0 +1,18 @@
+-- Purpose : Reporting package body
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE BODY gl_report_pkg AS
+  FUNCTION get_journal_list(p_date_from IN DATE, p_date_to IN DATE, p_state IN VARCHAR2)
+    RETURN SYS_REFCURSOR IS
+    v_cur SYS_REFCURSOR;
+  BEGIN
+    OPEN v_cur FOR
+      SELECT * FROM gl_header_v
+       WHERE approval_date BETWEEN p_date_from AND p_date_to
+         AND NVL(glh_state,'N') = NVL(p_state, glh_state);
+    RETURN v_cur;
+  END get_journal_list;
+END gl_report_pkg;
+/
diff --git a/pkg/gl_report_pkg.pks b/pkg/gl_report_pkg.pks
new file mode 100644
index 0000000..bc8cea9
--- /dev/null
+++ b/pkg/gl_report_pkg.pks
@@ -0,0 +1,10 @@
+-- Purpose : Reporting package spec
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE gl_report_pkg AS
+  FUNCTION get_journal_list(p_date_from IN DATE, p_date_to IN DATE, p_state IN VARCHAR2)
+    RETURN SYS_REFCURSOR;
+END gl_report_pkg;
+/
diff --git a/pkg/gl_tax_pkg.pkb b/pkg/gl_tax_pkg.pkb
new file mode 100644
index 0000000..f6c716d
--- /dev/null
+++ b/pkg/gl_tax_pkg.pkb
@@ -0,0 +1,17 @@
+-- Purpose : Tax calculation package body
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE BODY gl_tax_pkg AS
+  FUNCTION calculate_tax(p_tax_code IN VARCHAR2, p_base IN NUMBER) RETURN NUMBER IS
+    v_rate NUMBER;
+  BEGIN
+    SELECT rate INTO v_rate FROM tax_codes WHERE tax_code = p_tax_code;
+    RETURN NVL(v_rate,0) * p_base / 100;
+  EXCEPTION
+    WHEN NO_DATA_FOUND THEN
+      RAISE_APPLICATION_ERROR(-20009, 'Tax code not found');
+  END calculate_tax;
+END gl_tax_pkg;
+/
diff --git a/pkg/gl_tax_pkg.pks b/pkg/gl_tax_pkg.pks
new file mode 100644
index 0000000..40f1b02
--- /dev/null
+++ b/pkg/gl_tax_pkg.pks
@@ -0,0 +1,9 @@
+-- Purpose : Tax calculation package spec
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE gl_tax_pkg AS
+  FUNCTION calculate_tax(p_tax_code IN VARCHAR2, p_base IN NUMBER) RETURN NUMBER;
+END gl_tax_pkg;
+/
diff --git a/pkg/gl_ui_pkg.pkb b/pkg/gl_ui_pkg.pkb
new file mode 100644
index 0000000..11bd02d
--- /dev/null
+++ b/pkg/gl_ui_pkg.pkb
@@ -0,0 +1,19 @@
+-- Purpose : UI helpers package body
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE BODY gl_ui_pkg AS
+  FUNCTION validate_post_key(p_post_key IN gl_post_keys.key_id%TYPE)
+    RETURN VARCHAR2 IS
+    v_fields VARCHAR2(200);
+  BEGIN
+    SELECT mandatory_fields INTO v_fields
+      FROM gl_post_keys WHERE key_id = p_post_key;
+    RETURN v_fields;
+  EXCEPTION
+    WHEN NO_DATA_FOUND THEN
+      RAISE_APPLICATION_ERROR(-20008, 'Post key not found');
+  END validate_post_key;
+END gl_ui_pkg;
+/
diff --git a/pkg/gl_ui_pkg.pks b/pkg/gl_ui_pkg.pks
new file mode 100644
index 0000000..f1d38f9
--- /dev/null
+++ b/pkg/gl_ui_pkg.pks
@@ -0,0 +1,10 @@
+-- Purpose : UI helpers package spec
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE gl_ui_pkg AS
+  FUNCTION validate_post_key(p_post_key IN gl_post_keys.key_id%TYPE)
+    RETURN VARCHAR2;
+END gl_ui_pkg;
+/
diff --git a/triggers/tr_gl_header_log.sql b/triggers/tr_gl_header_log.sql
new file mode 100644
index 0000000..2631d2a
--- /dev/null
+++ b/triggers/tr_gl_header_log.sql
@@ -0,0 +1,21 @@
+-- Purpose : Audit trigger for GL_HEADER
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE TRIGGER tr_gl_header_log
+AFTER INSERT OR UPDATE OR DELETE ON gl_header
+FOR EACH ROW
+BEGIN
+  IF INSERTING THEN
+    INSERT INTO gl_change_log(log_id, table_name, operation, row_id_val, changed_by, changed_date)
+    VALUES(sq_gl_header.NEXTVAL, 'GL_HEADER', 'INSERT', :NEW.glh_id, USER, SYSDATE);
+  ELSIF UPDATING THEN
+    INSERT INTO gl_change_log(log_id, table_name, operation, row_id_val, changed_by, changed_date)
+    VALUES(sq_gl_header.NEXTVAL, 'GL_HEADER', 'UPDATE', :OLD.glh_id, USER, SYSDATE);
+  ELSIF DELETING THEN
+    INSERT INTO gl_change_log(log_id, table_name, operation, row_id_val, changed_by, changed_date)
+    VALUES(sq_gl_header.NEXTVAL, 'GL_HEADER', 'DELETE', :OLD.glh_id, USER, SYSDATE);
+  END IF;
+END;
+/
diff --git a/triggers/tr_gl_lines_log.sql b/triggers/tr_gl_lines_log.sql
new file mode 100644
index 0000000..07cd0ae
--- /dev/null
+++ b/triggers/tr_gl_lines_log.sql
@@ -0,0 +1,21 @@
+-- Purpose : Audit trigger for GL_LINES
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE TRIGGER tr_gl_lines_log
+AFTER INSERT OR UPDATE OR DELETE ON gl_lines
+FOR EACH ROW
+BEGIN
+  IF INSERTING THEN
+    INSERT INTO gl_change_log(log_id, table_name, operation, row_id_val, changed_by, changed_date)
+    VALUES(sq_gl_change_log.NEXTVAL, 'GL_LINES', 'INSERT', :NEW.gll_id, USER, SYSDATE);
+  ELSIF UPDATING THEN
+    INSERT INTO gl_change_log(log_id, table_name, operation, row_id_val, changed_by, changed_date)
+    VALUES(sq_gl_change_log.NEXTVAL, 'GL_LINES', 'UPDATE', :OLD.gll_id, USER, SYSDATE);
+  ELSIF DELETING THEN
+    INSERT INTO gl_change_log(log_id, table_name, operation, row_id_val, changed_by, changed_date)
+    VALUES(sq_gl_change_log.NEXTVAL, 'GL_LINES', 'DELETE', :OLD.gll_id, USER, SYSDATE);
+  END IF;
+END;
+/
diff --git a/ui/test_journal_entries.sql b/ui/test_journal_entries.sql
new file mode 100644
index 0000000..d585efa
--- /dev/null
+++ b/ui/test_journal_entries.sql
@@ -0,0 +1,38 @@
+-- Purpose : Example PL/SQL to create and post journals per doc type
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+SET SERVEROUTPUT ON
+DECLARE
+  v_glh_id gl_header.glh_id%TYPE;
+BEGIN
+  FOR r IN (SELECT doc_type FROM gl_doc_types) LOOP
+    gl_pkg.init_header(p_doc_type      => r.doc_type,
+                       p_period_id     => 202401,
+                       p_exchange_rate => 1,
+                       p_glh_id        => v_glh_id);
+
+    gl_pkg.add_line(p_glh_id       => v_glh_id,
+                    p_account_code => '1000',
+                    p_post_key     => '40',
+                    p_cost_center  => 'CC1',
+                    p_tax_code     => 'VAT',
+                    p_debit_amount => 100,
+                    p_credit_amount => NULL);
+
+    gl_pkg.add_line(p_glh_id       => v_glh_id,
+                    p_account_code => '2000',
+                    p_post_key     => '50',
+                    p_cost_center  => 'CC1',
+                    p_tax_code     => 'VAT',
+                    p_debit_amount => NULL,
+                    p_credit_amount => 100);
+
+    gl_pkg.validate_header(v_glh_id);
+
+    gl_pkg.apply_splits(v_glh_id);
+    gl_pkg.post_journal(v_glh_id, 'SYSTEM');
+  END LOOP;
+END;
+/

commit 2fe3e56f9714b3c923dd11443bbf1b1cee85bb27
Merge: e3d612b 8cfeb69
Author: Diego Munoz del rio <85699761+dmunozdelrio@users.noreply.github.com>
Date:   Tue Jun 10 17:52:37 2025 -0600

    Merge pull request #6 from dmunozdelrio/codex/allow-start-date-and-repeat_interval-parameters
    
    Parameterize scheduler job

commit 8cfeb69bd855b6e5454332eec3983dee0ae234cf
Author: Diego Munoz del rio <85699761+dmunozdelrio@users.noreply.github.com>
Date:   Tue Jun 10 17:51:58 2025 -0600

    Allow scheduling parameters for reverse job

diff --git a/jobs/reverse_job.sql b/jobs/reverse_job.sql
index 96ef6d7..b1b5592 100644
--- a/jobs/reverse_job.sql
+++ b/jobs/reverse_job.sql
@@ -3,13 +3,18 @@
 -- Date    : 2024-06-01
 -- Version : 1.0
 
+-- Allow callers to override the start date and repeat interval.
+-- Defaults run the job immediately and then daily.
+DEFINE START_DATE      = SYSDATE
+DEFINE REPEAT_INTERVAL = 'FREQ=DAILY'
+
 BEGIN
   DBMS_SCHEDULER.CREATE_JOB(
       job_name        => 'REVERSE_RUN',
       job_type        => 'PLSQL_BLOCK',
-      job_action      => 'BEGIN gl_pkg.reverse_entries(ADD_MONTHS(TRUNC(SYSDATE,''MM''),-1)); END;',
-      start_date      => SYSDATE,
-      repeat_interval => 'FREQ=DAILY',
+      job_action      => q'[BEGIN gl_pkg.reverse_entries(ADD_MONTHS(TRUNC(SYSDATE,'MM'),-1)); END;]',
+      start_date      => &START_DATE,
+      repeat_interval => &REPEAT_INTERVAL,
       enabled         => TRUE);
 END;
 /

commit e3d612b94cd6f3467649e5dba7d0c58d7d058f9b
Merge: ac4e37a 0521493
Author: Diego Munoz del rio <85699761+dmunozdelrio@users.noreply.github.com>
Date:   Tue Jun 10 17:49:37 2025 -0600

    Merge pull request #5 from dmunozdelrio/codex/modify-init_header-with-new-sequences
    
    Update init_header sequences

commit 0521493f2da1ea6b29ef8c3648608b89010b457d
Author: Diego Munoz del rio <85699761+dmunozdelrio@users.noreply.github.com>
Date:   Tue Jun 10 17:48:27 2025 -0600

    Use global sequence for header id and doc type sequence for doc number

diff --git a/pkg/gl_pkg.pkb b/pkg/gl_pkg.pkb
index 11a59da..50f182e 100644
--- a/pkg/gl_pkg.pkb
+++ b/pkg/gl_pkg.pkb
@@ -10,14 +10,16 @@ CREATE OR REPLACE PACKAGE BODY gl_pkg AS
                         p_exchange_rate IN gl_header.glh_exchange_rate%TYPE,
                         p_glh_id        OUT gl_header.glh_id%TYPE) IS
     v_seq_name VARCHAR2(30);
+    v_doc_no   NUMBER;
   BEGIN
     SELECT 'SQ_DOC_' || p_doc_type INTO v_seq_name FROM gl_doc_types
       WHERE doc_type = p_doc_type;
 
-    EXECUTE IMMEDIATE 'SELECT ' || v_seq_name || '.NEXTVAL FROM dual' INTO p_glh_id;
+    SELECT sq_gl_header.NEXTVAL INTO p_glh_id FROM dual;
+    EXECUTE IMMEDIATE 'SELECT ' || v_seq_name || '.NEXTVAL FROM dual' INTO v_doc_no;
 
     INSERT INTO gl_header(glh_id, doc_type, doc_no, glh_exchange_rate, period_id, glh_state)
-    VALUES(p_glh_id, p_doc_type, p_glh_id, p_exchange_rate, p_period_id, 'N');
+    VALUES(p_glh_id, p_doc_type, v_doc_no, p_exchange_rate, p_period_id, 'N');
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RAISE_APPLICATION_ERROR(-20001, 'Invalid DOC_TYPE');

commit ac4e37a4b9bfd2c4ac610aaa064a5b817890cbe0
Merge: 07284e7 097af59
Author: Diego Munoz del rio <85699761+dmunozdelrio@users.noreply.github.com>
Date:   Tue Jun 10 17:46:05 2025 -0600

    Merge pull request #4 from dmunozdelrio/codex/enhance-validate_header-function
    
    Add enhanced header validations

commit 097af59ddfbd812fd3f4cd35315104f92494a3d3
Author: Diego Munoz del rio <85699761+dmunozdelrio@users.noreply.github.com>
Date:   Tue Jun 10 17:45:39 2025 -0600

    Enhance header validation

diff --git a/pkg/gl_pkg.pkb b/pkg/gl_pkg.pkb
index 3bda746..11a59da 100644
--- a/pkg/gl_pkg.pkb
+++ b/pkg/gl_pkg.pkb
@@ -59,7 +59,9 @@ CREATE OR REPLACE PACKAGE BODY gl_pkg AS
     v_debits NUMBER;
     v_credits NUMBER;
     v_doc_type gl_header.doc_type%TYPE;
+    v_period_id gl_header.period_id%TYPE;
     v_count NUMBER;
+    v_status CHAR(1);
   BEGIN
     SELECT SUM(NVL(debit_amount,0)), SUM(NVL(credit_amount,0))
       INTO v_debits, v_credits
@@ -69,11 +71,44 @@ CREATE OR REPLACE PACKAGE BODY gl_pkg AS
       RAISE_APPLICATION_ERROR(-20006, 'Journal not balanced');
     END IF;
 
-    SELECT doc_type INTO v_doc_type FROM gl_header WHERE glh_id = p_glh_id;
+    SELECT doc_type, period_id INTO v_doc_type, v_period_id
+      FROM gl_header WHERE glh_id = p_glh_id;
     SELECT COUNT(*) INTO v_count FROM gl_doc_types WHERE doc_type = v_doc_type;
     IF v_count = 0 THEN
       RAISE_APPLICATION_ERROR(-20007, 'Invalid DOC_TYPE');
     END IF;
+
+    SELECT status INTO v_status FROM gl_periods WHERE period_id = v_period_id;
+    IF v_status <> 'O' THEN
+      RAISE_APPLICATION_ERROR(-20010, 'Period closed');
+    END IF;
+
+    SELECT COUNT(*) INTO v_count
+      FROM gl_lines l
+     WHERE l.glh_id = p_glh_id
+       AND NOT EXISTS (SELECT 1 FROM gl_post_keys pk WHERE pk.key_id = l.post_key);
+    IF v_count > 0 THEN
+      RAISE_APPLICATION_ERROR(-20011, 'Invalid POST_KEY in lines');
+    END IF;
+
+    SELECT COUNT(*) INTO v_count
+      FROM gl_lines l
+      JOIN gl_post_keys pk ON pk.key_id = l.post_key
+     WHERE l.glh_id = p_glh_id
+       AND INSTR(pk.mandatory_fields, 'COST_CENTER') > 0
+       AND l.cost_center IS NULL;
+    IF v_count > 0 THEN
+      RAISE_APPLICATION_ERROR(-20012, 'Cost center missing');
+    END IF;
+
+    SELECT COUNT(*) INTO v_count
+      FROM gl_lines l
+     WHERE l.glh_id = p_glh_id
+       AND ((l.debit_amount IS NOT NULL AND l.debit_amount <= 0) OR
+            (l.credit_amount IS NOT NULL AND l.credit_amount <= 0));
+    IF v_count > 0 THEN
+      RAISE_APPLICATION_ERROR(-20013, 'Negative amounts found');
+    END IF;
   END validate_header;
 
   PROCEDURE post_journal(p_glh_id IN gl_header.glh_id%TYPE,

commit 07284e773fb7c58cbd63e644ff3c6e74ef46c209
Merge: d34cc9f 29a2cb8
Author: Diego Munoz del rio <85699761+dmunozdelrio@users.noreply.github.com>
Date:   Tue Jun 10 17:40:21 2025 -0600

    Merge pull request #3 from dmunozdelrio/codex/update-gl_change_log-inserts-to-use-sq_gl_change_log.nextval
    
    Use correct sequence in GL header trigger

commit 29a2cb85133d5b9aabc319b7f4eee9711e664a05
Author: Diego Munoz del rio <85699761+dmunozdelrio@users.noreply.github.com>
Date:   Tue Jun 10 17:40:03 2025 -0600

    Use gl change log sequence in header trigger

diff --git a/triggers/tr_gl_header_log.sql b/triggers/tr_gl_header_log.sql
index 2631d2a..e2297e0 100644
--- a/triggers/tr_gl_header_log.sql
+++ b/triggers/tr_gl_header_log.sql
@@ -9,13 +9,13 @@ FOR EACH ROW
 BEGIN
   IF INSERTING THEN
     INSERT INTO gl_change_log(log_id, table_name, operation, row_id_val, changed_by, changed_date)
-    VALUES(sq_gl_header.NEXTVAL, 'GL_HEADER', 'INSERT', :NEW.glh_id, USER, SYSDATE);
+    VALUES(sq_gl_change_log.NEXTVAL, 'GL_HEADER', 'INSERT', :NEW.glh_id, USER, SYSDATE);
   ELSIF UPDATING THEN
     INSERT INTO gl_change_log(log_id, table_name, operation, row_id_val, changed_by, changed_date)
-    VALUES(sq_gl_header.NEXTVAL, 'GL_HEADER', 'UPDATE', :OLD.glh_id, USER, SYSDATE);
+    VALUES(sq_gl_change_log.NEXTVAL, 'GL_HEADER', 'UPDATE', :OLD.glh_id, USER, SYSDATE);
   ELSIF DELETING THEN
     INSERT INTO gl_change_log(log_id, table_name, operation, row_id_val, changed_by, changed_date)
-    VALUES(sq_gl_header.NEXTVAL, 'GL_HEADER', 'DELETE', :OLD.glh_id, USER, SYSDATE);
+    VALUES(sq_gl_change_log.NEXTVAL, 'GL_HEADER', 'DELETE', :OLD.glh_id, USER, SYSDATE);
   END IF;
 END;
 /

commit d34cc9f2876090d7302c8bca66fd5517f20053fa
Merge: 325d440 74f3287
Author: Diego Munoz del rio <85699761+dmunozdelrio@users.noreply.github.com>
Date:   Tue Jun 10 17:36:18 2025 -0600

    Merge pull request #2 from dmunozdelrio/codex/replace-not-exists-with-select-count-logic
    
    Refactor validation to use COUNT check

commit 74f32879a6b0e591e5517e832952edc8db1322d8
Author: Diego Munoz del rio <85699761+dmunozdelrio@users.noreply.github.com>
Date:   Tue Jun 10 17:35:31 2025 -0600

    Replace NOT EXISTS with COUNT check in validate_header

diff --git a/pkg/gl_pkg.pkb b/pkg/gl_pkg.pkb
index 9e3448f..3bda746 100644
--- a/pkg/gl_pkg.pkb
+++ b/pkg/gl_pkg.pkb
@@ -59,6 +59,7 @@ CREATE OR REPLACE PACKAGE BODY gl_pkg AS
     v_debits NUMBER;
     v_credits NUMBER;
     v_doc_type gl_header.doc_type%TYPE;
+    v_count NUMBER;
   BEGIN
     SELECT SUM(NVL(debit_amount,0)), SUM(NVL(credit_amount,0))
       INTO v_debits, v_credits
@@ -69,7 +70,8 @@ CREATE OR REPLACE PACKAGE BODY gl_pkg AS
     END IF;
 
     SELECT doc_type INTO v_doc_type FROM gl_header WHERE glh_id = p_glh_id;
-    IF NOT EXISTS (SELECT 1 FROM gl_doc_types WHERE doc_type = v_doc_type) THEN
+    SELECT COUNT(*) INTO v_count FROM gl_doc_types WHERE doc_type = v_doc_type;
+    IF v_count = 0 THEN
       RAISE_APPLICATION_ERROR(-20007, 'Invalid DOC_TYPE');
     END IF;
   END validate_header;

commit 325d440478c904cf8a8cccf038ce4d016d1451ce
Merge: e0840a0 ad1f7eb
Author: Diego Munoz del rio <85699761+dmunozdelrio@users.noreply.github.com>
Date:   Tue Jun 10 17:21:31 2025 -0600

    Merge pull request #1 from dmunozdelrio/codex/generate-oracle-11g-pl/sql-journal-entry-module-codebase
    
    Add journal entry module SQL scripts

commit ad1f7eb80ca49c3cdde4170697040b79ae86c3bf
Author: Diego Munoz del rio <85699761+dmunozdelrio@users.noreply.github.com>
Date:   Tue Jun 10 17:20:43 2025 -0600

    Add journal entry module scripts

diff --git a/ddl/ddl_constraints.sql b/ddl/ddl_constraints.sql
new file mode 100644
index 0000000..33877dd
--- /dev/null
+++ b/ddl/ddl_constraints.sql
@@ -0,0 +1,21 @@
+-- Purpose : Add constraints and indexes for Journal Entry
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+ALTER TABLE gl_header ADD CONSTRAINT fk_glh_doctype FOREIGN KEY (doc_type)
+    REFERENCES gl_doc_types(doc_type);
+
+ALTER TABLE gl_lines ADD CONSTRAINT fk_gll_header FOREIGN KEY (glh_id)
+    REFERENCES gl_header(glh_id);
+
+ALTER TABLE gl_lines ADD CONSTRAINT fk_gll_tax FOREIGN KEY (tax_code)
+    REFERENCES tax_codes(tax_code);
+
+CREATE INDEX idx_gl_lines_header ON gl_lines(glh_id);
+CREATE INDEX idx_gl_lines_post_key ON gl_lines(post_key);
+
+ALTER TABLE gl_header ADD CONSTRAINT fk_glh_state FOREIGN KEY (glh_state)
+    REFERENCES gl_workflow_states(state_id);
+CREATE INDEX idx_gl_header_period ON gl_header(period_id);
+CREATE INDEX idx_gl_header_state ON gl_header(glh_state);
diff --git a/ddl/ddl_sequences.sql b/ddl/ddl_sequences.sql
new file mode 100644
index 0000000..93b828a
--- /dev/null
+++ b/ddl/ddl_sequences.sql
@@ -0,0 +1,10 @@
+-- Purpose : Create sequences for Journal Entry
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE SEQUENCE sq_gl_header START WITH 1 INCREMENT BY 1;
+CREATE SEQUENCE sq_gl_lines  START WITH 1 INCREMENT BY 1;
+-- Sequence per DOC_TYPE example for 'JE'
+CREATE SEQUENCE sq_doc_JE START WITH 1 INCREMENT BY 1;
+CREATE SEQUENCE sq_gl_change_log START WITH 1 INCREMENT BY 1;
diff --git a/ddl/ddl_tables.sql b/ddl/ddl_tables.sql
new file mode 100644
index 0000000..9c0f57e
--- /dev/null
+++ b/ddl/ddl_tables.sql
@@ -0,0 +1,73 @@
+-- Purpose : Create core tables for Journal Entry
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE TABLE gl_header (
+    glh_id           NUMBER         PRIMARY KEY,
+    doc_type         VARCHAR2(10)   NOT NULL,
+    doc_no           NUMBER,
+    glh_exchange_rate NUMBER(10,5),
+    glh_state        VARCHAR2(2),
+    approver         VARCHAR2(50),
+    approval_date    DATE,
+    period_id        NUMBER         NOT NULL,
+    status           CHAR(1)        DEFAULT 'B'
+);
+
+CREATE TABLE gl_lines (
+    gll_id        NUMBER        PRIMARY KEY,
+    glh_id        NUMBER        NOT NULL,
+    account_code  VARCHAR2(30)  NOT NULL,
+    post_key      VARCHAR2(10)  NOT NULL,
+    cost_center   VARCHAR2(30),
+    tax_code      VARCHAR2(10),
+    debit_amount  NUMBER(15,2),
+    credit_amount NUMBER(15,2)
+);
+
+CREATE TABLE gl_doc_types (
+    doc_type        VARCHAR2(10) PRIMARY KEY,
+    description     VARCHAR2(100),
+    num_range_start NUMBER,
+    num_range_end   NUMBER
+);
+
+CREATE TABLE gl_post_keys (
+    key_id           VARCHAR2(10) PRIMARY KEY,
+    description      VARCHAR2(100),
+    dr_cr_flag       CHAR(1) CHECK (dr_cr_flag IN ('D','C')),
+    mandatory_fields VARCHAR2(200)
+);
+
+CREATE TABLE gl_split_rules (
+    rule_id      NUMBER PRIMARY KEY,
+    account_code VARCHAR2(30),
+    segment_field VARCHAR2(30)
+);
+
+CREATE TABLE gl_workflow_states (
+    state_id    VARCHAR2(10) PRIMARY KEY,
+    description VARCHAR2(100)
+);
+
+CREATE TABLE tax_codes (
+    tax_code    VARCHAR2(10) PRIMARY KEY,
+    description VARCHAR2(100),
+    rate        NUMBER(5,2)
+);
+
+CREATE TABLE withholding_rules (
+    rule_id     NUMBER PRIMARY KEY,
+    description VARCHAR2(100),
+    rate        NUMBER(5,2)
+);
+
+CREATE TABLE gl_change_log (
+    log_id       NUMBER PRIMARY KEY,
+    table_name   VARCHAR2(30),
+    operation    VARCHAR2(10),
+    row_id_val   NUMBER,
+    changed_by   VARCHAR2(50),
+    changed_date DATE
+);
diff --git a/ddl/ddl_views.sql b/ddl/ddl_views.sql
new file mode 100644
index 0000000..e12933a
--- /dev/null
+++ b/ddl/ddl_views.sql
@@ -0,0 +1,14 @@
+-- Purpose : Create views for Journal Entry
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE VIEW gl_header_v AS
+SELECT h.*, d.description AS doc_description
+  FROM gl_header h
+  LEFT JOIN gl_doc_types d ON h.doc_type = d.doc_type;
+
+CREATE OR REPLACE VIEW gl_lines_v AS
+SELECT l.*, h.doc_no, h.doc_type
+  FROM gl_lines l
+  JOIN gl_header h ON l.glh_id = h.glh_id;
diff --git a/ddl/seed_data.sql b/ddl/seed_data.sql
new file mode 100644
index 0000000..c6ebc75
--- /dev/null
+++ b/ddl/seed_data.sql
@@ -0,0 +1,23 @@
+-- Purpose : Seed lookup tables
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+INSERT INTO gl_doc_types(doc_type, description, num_range_start, num_range_end)
+VALUES('JE', 'Journal Entry', 1, 999999);
+
+INSERT INTO gl_post_keys(key_id, description, dr_cr_flag, mandatory_fields)
+VALUES('40', 'Debit Post', 'D', 'COST_CENTER');
+INSERT INTO gl_post_keys(key_id, description, dr_cr_flag, mandatory_fields)
+VALUES('50', 'Credit Post', 'C', 'COST_CENTER');
+
+INSERT INTO gl_workflow_states(state_id, description)
+VALUES('N', 'New');
+INSERT INTO gl_workflow_states(state_id, description)
+VALUES('P', 'Posted');
+
+INSERT INTO tax_codes(tax_code, description, rate)
+VALUES('VAT', 'Value Added Tax', 5);
+
+INSERT INTO withholding_rules(rule_id, description, rate)
+VALUES(1, 'Default WH', 10);
diff --git a/deploy_all.sql b/deploy_all.sql
new file mode 100644
index 0000000..51c8a92
--- /dev/null
+++ b/deploy_all.sql
@@ -0,0 +1,36 @@
+-- Purpose : Master deployment script for Journal Entry module
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+-- 1. Tables
+@ddl/ddl_tables.sql
+
+-- 2. Sequences
+@ddl/ddl_sequences.sql
+
+-- 3. Constraints and Indexes
+@ddl/ddl_constraints.sql
+
+-- 4. Views
+@ddl/ddl_views.sql
+
+-- 5. Packages
+@pkg/gl_pkg.pks
+@pkg/gl_pkg.pkb
+@pkg/gl_ui_pkg.pks
+@pkg/gl_ui_pkg.pkb
+@pkg/gl_tax_pkg.pks
+@pkg/gl_tax_pkg.pkb
+@pkg/gl_report_pkg.pks
+@pkg/gl_report_pkg.pkb
+
+-- 6. Triggers
+@triggers/tr_gl_header_log.sql
+@triggers/tr_gl_lines_log.sql
+
+-- 7. Scheduler jobs
+@jobs/reverse_job.sql
+
+-- 8. Seed data
+@ddl/seed_data.sql
diff --git a/jobs/reverse_job.sql b/jobs/reverse_job.sql
new file mode 100644
index 0000000..96ef6d7
--- /dev/null
+++ b/jobs/reverse_job.sql
@@ -0,0 +1,15 @@
+-- Purpose : Scheduler job to reverse journal entries
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+BEGIN
+  DBMS_SCHEDULER.CREATE_JOB(
+      job_name        => 'REVERSE_RUN',
+      job_type        => 'PLSQL_BLOCK',
+      job_action      => 'BEGIN gl_pkg.reverse_entries(ADD_MONTHS(TRUNC(SYSDATE,''MM''),-1)); END;',
+      start_date      => SYSDATE,
+      repeat_interval => 'FREQ=DAILY',
+      enabled         => TRUE);
+END;
+/
diff --git a/pkg/gl_pkg.pkb b/pkg/gl_pkg.pkb
new file mode 100644
index 0000000..9e3448f
--- /dev/null
+++ b/pkg/gl_pkg.pkb
@@ -0,0 +1,115 @@
+-- Purpose : Core business package body for Journal Entry
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE BODY gl_pkg AS
+
+  PROCEDURE init_header(p_doc_type      IN gl_header.doc_type%TYPE,
+                        p_period_id     IN gl_header.period_id%TYPE,
+                        p_exchange_rate IN gl_header.glh_exchange_rate%TYPE,
+                        p_glh_id        OUT gl_header.glh_id%TYPE) IS
+    v_seq_name VARCHAR2(30);
+  BEGIN
+    SELECT 'SQ_DOC_' || p_doc_type INTO v_seq_name FROM gl_doc_types
+      WHERE doc_type = p_doc_type;
+
+    EXECUTE IMMEDIATE 'SELECT ' || v_seq_name || '.NEXTVAL FROM dual' INTO p_glh_id;
+
+    INSERT INTO gl_header(glh_id, doc_type, doc_no, glh_exchange_rate, period_id, glh_state)
+    VALUES(p_glh_id, p_doc_type, p_glh_id, p_exchange_rate, p_period_id, 'N');
+  EXCEPTION
+    WHEN NO_DATA_FOUND THEN
+      RAISE_APPLICATION_ERROR(-20001, 'Invalid DOC_TYPE');
+  END init_header;
+
+  PROCEDURE add_line(p_glh_id       IN gl_lines.glh_id%TYPE,
+                     p_account_code IN gl_lines.account_code%TYPE,
+                     p_post_key     IN gl_lines.post_key%TYPE,
+                     p_cost_center  IN gl_lines.cost_center%TYPE,
+                     p_tax_code     IN gl_lines.tax_code%TYPE,
+                     p_debit_amount IN gl_lines.debit_amount%TYPE,
+                     p_credit_amount IN gl_lines.credit_amount%TYPE) IS
+    v_mandatory VARCHAR2(200);
+    v_flag CHAR(1);
+  BEGIN
+    SELECT mandatory_fields, dr_cr_flag INTO v_mandatory, v_flag
+      FROM gl_post_keys WHERE key_id = p_post_key;
+
+    IF v_flag = 'D' AND (p_debit_amount IS NULL OR p_debit_amount <= 0) THEN
+      RAISE_APPLICATION_ERROR(-20002, 'Debit amount required');
+    ELSIF v_flag = 'C' AND (p_credit_amount IS NULL OR p_credit_amount <= 0) THEN
+      RAISE_APPLICATION_ERROR(-20003, 'Credit amount required');
+    END IF;
+
+    IF INSTR(v_mandatory, 'COST_CENTER') > 0 AND p_cost_center IS NULL THEN
+      RAISE_APPLICATION_ERROR(-20004, 'Cost center mandatory');
+    END IF;
+
+    INSERT INTO gl_lines(gll_id, glh_id, account_code, post_key,
+                         cost_center, tax_code, debit_amount, credit_amount)
+    VALUES(sq_gl_lines.NEXTVAL, p_glh_id, p_account_code, p_post_key,
+           p_cost_center, p_tax_code, p_debit_amount, p_credit_amount);
+  EXCEPTION
+    WHEN NO_DATA_FOUND THEN
+      RAISE_APPLICATION_ERROR(-20005, 'Invalid POST_KEY');
+  END add_line;
+
+  PROCEDURE validate_header(p_glh_id IN gl_header.glh_id%TYPE) IS
+    v_debits NUMBER;
+    v_credits NUMBER;
+    v_doc_type gl_header.doc_type%TYPE;
+  BEGIN
+    SELECT SUM(NVL(debit_amount,0)), SUM(NVL(credit_amount,0))
+      INTO v_debits, v_credits
+      FROM gl_lines WHERE glh_id = p_glh_id;
+
+    IF v_debits <> v_credits THEN
+      RAISE_APPLICATION_ERROR(-20006, 'Journal not balanced');
+    END IF;
+
+    SELECT doc_type INTO v_doc_type FROM gl_header WHERE glh_id = p_glh_id;
+    IF NOT EXISTS (SELECT 1 FROM gl_doc_types WHERE doc_type = v_doc_type) THEN
+      RAISE_APPLICATION_ERROR(-20007, 'Invalid DOC_TYPE');
+    END IF;
+  END validate_header;
+
+  PROCEDURE post_journal(p_glh_id IN gl_header.glh_id%TYPE,
+                         p_approver IN gl_header.approver%TYPE) IS
+  BEGIN
+    UPDATE gl_header
+       SET glh_state = 'P', approver = p_approver,
+           approval_date = SYSDATE
+     WHERE glh_id = p_glh_id;
+  END post_journal;
+
+  PROCEDURE apply_splits(p_glh_id IN gl_header.glh_id%TYPE) IS
+  BEGIN
+    FOR r IN (SELECT gll_id, account_code
+                FROM gl_lines WHERE glh_id = p_glh_id) LOOP
+      FOR s IN (SELECT segment_field FROM gl_split_rules
+                 WHERE account_code = r.account_code) LOOP
+        INSERT INTO gl_lines(gll_id, glh_id, account_code, post_key,
+                             cost_center, tax_code, debit_amount, credit_amount)
+        VALUES(sq_gl_lines.NEXTVAL, p_glh_id, r.account_code, 'SPLIT',
+               s.segment_field, NULL, 0, 0);
+      END LOOP;
+    END LOOP;
+  END apply_splits;
+
+  PROCEDURE reverse_entries(p_period_id IN NUMBER) IS
+  BEGIN
+    FOR h IN (SELECT glh_id FROM gl_header WHERE period_id = p_period_id) LOOP
+      FOR l IN (SELECT * FROM gl_lines WHERE glh_id = h.glh_id) LOOP
+        INSERT INTO gl_lines(gll_id, glh_id, account_code, post_key,
+                             cost_center, tax_code,
+                             debit_amount, credit_amount)
+        VALUES(sq_gl_lines.NEXTVAL, h.glh_id, l.account_code, l.post_key,
+               l.cost_center, l.tax_code,
+               -NVL(l.debit_amount,0), -NVL(l.credit_amount,0));
+      END LOOP;
+    END LOOP;
+  END reverse_entries;
+
+END gl_pkg;
+/
diff --git a/pkg/gl_pkg.pks b/pkg/gl_pkg.pks
new file mode 100644
index 0000000..1dc64ce
--- /dev/null
+++ b/pkg/gl_pkg.pks
@@ -0,0 +1,26 @@
+-- Purpose : Core business package spec for Journal Entry
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE gl_pkg AS
+  PROCEDURE init_header(p_doc_type      IN gl_header.doc_type%TYPE,
+                        p_period_id     IN gl_header.period_id%TYPE,
+                        p_exchange_rate IN gl_header.glh_exchange_rate%TYPE,
+                        p_glh_id        OUT gl_header.glh_id%TYPE);
+
+  PROCEDURE add_line(p_glh_id       IN gl_lines.glh_id%TYPE,
+                     p_account_code IN gl_lines.account_code%TYPE,
+                     p_post_key     IN gl_lines.post_key%TYPE,
+                     p_cost_center  IN gl_lines.cost_center%TYPE,
+                     p_tax_code     IN gl_lines.tax_code%TYPE,
+                     p_debit_amount IN gl_lines.debit_amount%TYPE,
+                     p_credit_amount IN gl_lines.credit_amount%TYPE);
+
+  PROCEDURE validate_header(p_glh_id IN gl_header.glh_id%TYPE);
+  PROCEDURE post_journal(p_glh_id IN gl_header.glh_id%TYPE,
+                         p_approver IN gl_header.approver%TYPE);
+  PROCEDURE apply_splits(p_glh_id IN gl_header.glh_id%TYPE);
+  PROCEDURE reverse_entries(p_period_id IN NUMBER);
+END gl_pkg;
+/
diff --git a/pkg/gl_report_pkg.pkb b/pkg/gl_report_pkg.pkb
new file mode 100644
index 0000000..79d1af0
--- /dev/null
+++ b/pkg/gl_report_pkg.pkb
@@ -0,0 +1,18 @@
+-- Purpose : Reporting package body
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE BODY gl_report_pkg AS
+  FUNCTION get_journal_list(p_date_from IN DATE, p_date_to IN DATE, p_state IN VARCHAR2)
+    RETURN SYS_REFCURSOR IS
+    v_cur SYS_REFCURSOR;
+  BEGIN
+    OPEN v_cur FOR
+      SELECT * FROM gl_header_v
+       WHERE approval_date BETWEEN p_date_from AND p_date_to
+         AND NVL(glh_state,'N') = NVL(p_state, glh_state);
+    RETURN v_cur;
+  END get_journal_list;
+END gl_report_pkg;
+/
diff --git a/pkg/gl_report_pkg.pks b/pkg/gl_report_pkg.pks
new file mode 100644
index 0000000..bc8cea9
--- /dev/null
+++ b/pkg/gl_report_pkg.pks
@@ -0,0 +1,10 @@
+-- Purpose : Reporting package spec
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE gl_report_pkg AS
+  FUNCTION get_journal_list(p_date_from IN DATE, p_date_to IN DATE, p_state IN VARCHAR2)
+    RETURN SYS_REFCURSOR;
+END gl_report_pkg;
+/
diff --git a/pkg/gl_tax_pkg.pkb b/pkg/gl_tax_pkg.pkb
new file mode 100644
index 0000000..f6c716d
--- /dev/null
+++ b/pkg/gl_tax_pkg.pkb
@@ -0,0 +1,17 @@
+-- Purpose : Tax calculation package body
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE BODY gl_tax_pkg AS
+  FUNCTION calculate_tax(p_tax_code IN VARCHAR2, p_base IN NUMBER) RETURN NUMBER IS
+    v_rate NUMBER;
+  BEGIN
+    SELECT rate INTO v_rate FROM tax_codes WHERE tax_code = p_tax_code;
+    RETURN NVL(v_rate,0) * p_base / 100;
+  EXCEPTION
+    WHEN NO_DATA_FOUND THEN
+      RAISE_APPLICATION_ERROR(-20009, 'Tax code not found');
+  END calculate_tax;
+END gl_tax_pkg;
+/
diff --git a/pkg/gl_tax_pkg.pks b/pkg/gl_tax_pkg.pks
new file mode 100644
index 0000000..40f1b02
--- /dev/null
+++ b/pkg/gl_tax_pkg.pks
@@ -0,0 +1,9 @@
+-- Purpose : Tax calculation package spec
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE gl_tax_pkg AS
+  FUNCTION calculate_tax(p_tax_code IN VARCHAR2, p_base IN NUMBER) RETURN NUMBER;
+END gl_tax_pkg;
+/
diff --git a/pkg/gl_ui_pkg.pkb b/pkg/gl_ui_pkg.pkb
new file mode 100644
index 0000000..11bd02d
--- /dev/null
+++ b/pkg/gl_ui_pkg.pkb
@@ -0,0 +1,19 @@
+-- Purpose : UI helpers package body
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE BODY gl_ui_pkg AS
+  FUNCTION validate_post_key(p_post_key IN gl_post_keys.key_id%TYPE)
+    RETURN VARCHAR2 IS
+    v_fields VARCHAR2(200);
+  BEGIN
+    SELECT mandatory_fields INTO v_fields
+      FROM gl_post_keys WHERE key_id = p_post_key;
+    RETURN v_fields;
+  EXCEPTION
+    WHEN NO_DATA_FOUND THEN
+      RAISE_APPLICATION_ERROR(-20008, 'Post key not found');
+  END validate_post_key;
+END gl_ui_pkg;
+/
diff --git a/pkg/gl_ui_pkg.pks b/pkg/gl_ui_pkg.pks
new file mode 100644
index 0000000..f1d38f9
--- /dev/null
+++ b/pkg/gl_ui_pkg.pks
@@ -0,0 +1,10 @@
+-- Purpose : UI helpers package spec
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE PACKAGE gl_ui_pkg AS
+  FUNCTION validate_post_key(p_post_key IN gl_post_keys.key_id%TYPE)
+    RETURN VARCHAR2;
+END gl_ui_pkg;
+/
diff --git a/triggers/tr_gl_header_log.sql b/triggers/tr_gl_header_log.sql
new file mode 100644
index 0000000..2631d2a
--- /dev/null
+++ b/triggers/tr_gl_header_log.sql
@@ -0,0 +1,21 @@
+-- Purpose : Audit trigger for GL_HEADER
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE TRIGGER tr_gl_header_log
+AFTER INSERT OR UPDATE OR DELETE ON gl_header
+FOR EACH ROW
+BEGIN
+  IF INSERTING THEN
+    INSERT INTO gl_change_log(log_id, table_name, operation, row_id_val, changed_by, changed_date)
+    VALUES(sq_gl_header.NEXTVAL, 'GL_HEADER', 'INSERT', :NEW.glh_id, USER, SYSDATE);
+  ELSIF UPDATING THEN
+    INSERT INTO gl_change_log(log_id, table_name, operation, row_id_val, changed_by, changed_date)
+    VALUES(sq_gl_header.NEXTVAL, 'GL_HEADER', 'UPDATE', :OLD.glh_id, USER, SYSDATE);
+  ELSIF DELETING THEN
+    INSERT INTO gl_change_log(log_id, table_name, operation, row_id_val, changed_by, changed_date)
+    VALUES(sq_gl_header.NEXTVAL, 'GL_HEADER', 'DELETE', :OLD.glh_id, USER, SYSDATE);
+  END IF;
+END;
+/
diff --git a/triggers/tr_gl_lines_log.sql b/triggers/tr_gl_lines_log.sql
new file mode 100644
index 0000000..07cd0ae
--- /dev/null
+++ b/triggers/tr_gl_lines_log.sql
@@ -0,0 +1,21 @@
+-- Purpose : Audit trigger for GL_LINES
+-- Author  : Codex
+-- Date    : 2024-06-01
+-- Version : 1.0
+
+CREATE OR REPLACE TRIGGER tr_gl_lines_log
+AFTER INSERT OR UPDATE OR DELETE ON gl_lines
+FOR EACH ROW
+BEGIN
+  IF INSERTING THEN
+    INSERT INTO gl_change_log(log_id, table_name, operation, row_id_val, changed_by, changed_date)
+    VALUES(sq_gl_change_log.NEXTVAL, 'GL_LINES', 'INSERT', :NEW.gll_id, USER, SYSDATE);
+  ELSIF UPDATING THEN
+    INSERT INTO gl_change_log(log_id, table_name, operation, row_id_val, changed_by, changed_date)
+    VALUES(sq_gl_change_log.NEXTVAL, 'GL_LINES', 'UPDATE', :OLD.gll_id, USER, SYSDATE);
+  ELSIF DELETING THEN
+    INSERT INTO gl_change_log(log_id, table_name, operation, row_id_val, changed_by, changed_date)
+    VALUES(sq_gl_change_log.NEXTVAL, 'GL_LINES', 'DELETE', :OLD.gll_id, USER, SYSDATE);
+  END IF;
+END;
+/

commit e0840a0639900449797c8f723ca0731e35acbbfb
Author: DMUNOZDELRIO <dmunozdelrio@gmail.com>
Date:   Tue Jun 10 16:06:52 2025 -0600

    Add project folders with .gitkeep files

diff --git a/ddl/ .gitkeep b/ddl/ .gitkeep
new file mode 100644
index 0000000..e69de29
diff --git a/jobs/ .gitkeep b/jobs/ .gitkeep
new file mode 100644
index 0000000..e69de29
diff --git a/pkg/ .gitkeep b/pkg/ .gitkeep
new file mode 100644
index 0000000..e69de29
diff --git a/ui/ .gitkeep b/ui/ .gitkeep
new file mode 100644
index 0000000..e69de29

commit ef1e11d9739726abeae812603580492baff3b754
Author: DMUNOZDELRIO <dmunozdelrio@gmail.com>
Date:   Tue Jun 10 16:04:22 2025 -0600

    Initial commit ΓÇô repo skeleton

diff --git a/oracle-journal-entry/README.md b/oracle-journal-entry/README.md
new file mode 100644
index 0000000..7d255e9
--- /dev/null
+++ b/oracle-journal-entry/README.md
@@ -0,0 +1 @@
+# Oracle Journal Entry Module

commit feda03dde3e8d02b4020bbd09e331c461eb8404b
Author: DMUNOZDELRIO <dmunozdelrio@gmail.com>
Date:   Tue Jun 10 10:54:32 2025 -0600

    first commit

diff --git a/README.md b/README.md
new file mode 100644
index 0000000..1e7c60c
--- /dev/null
+++ b/README.md
@@ -0,0 +1 @@
+# Oerp
